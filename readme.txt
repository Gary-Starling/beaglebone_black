Host PC:
Distributor ID:	Ubuntu
Description:	Ubuntu 22.04.2 LTS
Release:	22.04
Codename:	jammy
5.19.0-41-generic

dev:
Beaglebone Black

1)On host pc you need install tftp and rfs server.

2)***buildroot***
- make menuconfig
 use external toolchain gcc-linaro-12.2.1-2023.03-x86_64_arm-linux-gnueabihf
 gcc version 12.x
 glibc
 target Busybox
 not compile kernel and u-boot
 add openssh
- make
buildroot/output/images/rootfs.tar
extract your filesystem to nfs-path; for exmple -> home/usr/nfs
 
 
2))***u-boot v2018.01)***
0001-am335x_evm-uEnv.txt-bootz-n-fixes.patch
0002-U-Boot-BeagleBone-Cape-Manager.patch
 └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean
 └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- am335x_boneblack_defconfig
 └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j6 							//i have six cores
 output ->
 -MLO
 -u-boot-spl.bin
 -u-boot.img
 
3)***)kernel Linux 5.18-rc4)***
  └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean
  └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- omap2plus_defconfig
  └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- uImage dtbs LOADADDR=0x80008000 -j6
  Kernel: arch/arm/boot/uImage is ready
  └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j6 modules
  └─ $ make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=<nfs-path> modules_install
  
  add /usr/nfs/etc resolv.conf
  >domain localdomain
  >search localdomain
  >nameserver 8.8.8.8
  >nameserver 8.8.4.4
  
4)copy to sdcard MLO,uEnv.txt,u-boot-spl,u-boot.img
 Load uImage and dtb from host.
 !!!Use your own ip!!!
cat uEnv.txt >   
console=ttyS0,115200n8
ipaddr=192.168.0.111
serverip=192.168.0.110
absolutepath=
rootpath=/srv/nfs,nolock,rw,vers=3
loadtftp=echo Booting from network ...;tftpboot ${loadaddr} ${absolutepath}uImage; tftpboot ${fdtaddr} ${absolutepath}am335x-boneblack.dtb
netargs=setenv bootargs console=${console} root=/dev/nfs rw rootfstype=nfs nfsroot=${serverip}:${rootpath} ip=192.168.0.111:192.168.0.110:192.168.0.1:255.255.255.0::eth0:off
uenvcmd=setenv autoload no; run loadtftp; run netargs; bootm ${loadaddr} - ${fdtaddr}

4) copy uImage and dtb to /srv/tftp (my tftp foldder)
   /srv/nfs/etc/ssh/sshd_config
   	port 22
   	PermitRootLogin yes
   	
   /srv/nfs/etc/network/interfaces
 	 # interface file auto-generated by buildroot

	auto lo
	iface lo inet loopback

	#gateway it's host ip
	auto usb0
	iface usb0 inet static
	    address 192.168.0.112
	    netmask 255.255.255.0
	    network 192.168.0.0
	    gateway 192.168.0.110
	    
	auto eth0
	iface eth0 inet static
	    address 192.168.0.111
	    netmask 255.255.255.0
	    gateway 192.168.0.1
	   
└─ $ sudo chmod 777 -R /srv/nfs/
└─ $ sudo chown nobody:nogroup -R /srv/nfs/
└─ $ sudo chown nobody:nogroup -R /srv/nfs/
└─ $ sudo chmod 755 /srv/nfs/var/empty/(for sshd)

5)for usb0 need enable g_ether and dummy_hcd;
add to /srv/nfs/etc/init.d S02module
cat S02module


#!/bin/sh
#
# load the kernel modules at startup 
#

case "$1" in
  start)
	printf "Loading kernel modules : "
	/sbin/modprobe dummy_hcd
	[ $? = 0 ] && echo "OK" || echo "FAIL"
	/sbin/modprobe g_ether
	[ $? = 0 ] && echo "OK" || echo "FAIL"
	;;
  stop)
	printf "Unloading kernel modules : "
	/sbin/rnmod dummy_hcd
	[ $? = 0 ] && echo "OK" || echo "FAIL"
	/sbin/rmmod g_ether
	[ $? = 0 ] && echo "OK" || echo "FAIL"
	;;
  restart|reload)
	"$0" stop
	"$0" start
	;;
  *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?

6)minicom and test




  
  	



  




